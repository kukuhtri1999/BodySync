// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// For the starter
// schema.prisma

// Define the User model
model User {
  userId      Int      @id @default(autoincrement())
  username    String
  email       String
  password    String
  height      Float
  weight      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Define relationships
  workouts    Workout[]
  nutritions  Nutrition[]
  goals       Goal[]
}

// Define the Fitness Activity model
model FitnessActivity {
  activityId    Int      @id @default(autoincrement())
  activityName  String
  activityType  String
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Define relationships
  workouts      Workout[]
}

// Define the Workout model
model Workout {
  workoutId        Int       @id @default(autoincrement())
  userId           Int
  activityId       Int
  date             DateTime
  duration         Int
  caloriesBurned   Float
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // Define relationships
  user             User      @relation(fields: [userId], references: [userId])
  fitnessActivity  FitnessActivity @relation(fields: [activityId], references: [activityId])
}

// Define the Nutrition model
model Nutrition {
  nutritionId      Int      @id @default(autoincrement())
  userId           Int
  date             DateTime
  mealType         String
  foodItem         String
  caloriesConsumed Float
  protein          Float
  carbohydrates    Float
  fats             Float
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // Define relationships
  user             User      @relation(fields: [userId], references: [userId])
}

// Define the Goal model
model Goal {
  goalId          Int      @id @default(autoincrement())
  userId          Int
  goalType        String
  goalDescription String
  targetValue     Float
  progress        Float
  achieved        Boolean
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Define relationships
  user            User     @relation(fields: [userId], references: [userId])
}
